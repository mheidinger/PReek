<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "2600"
   version = "1.7">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES"
      buildArchitectures = "Automatic">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "6CB027212BFF817E00C4C3B1"
               BuildableName = "PReek.app"
               BlueprintName = "PReek"
               ReferencedContainer = "container:PReek.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES"
      shouldAutocreateTestPlan = "YES">
      <Testables>
         <TestableReference
            skipped = "NO"
            parallelizable = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "6C1CB6CD2C920E2E00305288"
               BuildableName = "PReekTests.xctest"
               BlueprintName = "PReekTests"
               ReferencedContainer = "container:PReek.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "6CB027212BFF817E00C4C3B1"
            BuildableName = "PReek.app"
            BlueprintName = "PReek"
            ReferencedContainer = "container:PReek.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Release"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "6CB027212BFF817E00C4C3B1"
            BuildableName = "PReek.app"
            BlueprintName = "PReek"
            ReferencedContainer = "container:PReek.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
      <PostActions>
         <ExecutionAction
            ActionType = "Xcode.IDEStandardExecutionActionsCore.ExecutionActionType.ShellScriptAction">
            <ActionContent
               title = "Create Signed and Notarized DMG"
               scriptText = "# Add brew binaries to path, needed for fnm and image tooling&#10;export PATH=$PATH:/opt/homebrew/bin&#10;&#10;# notarytool credentials.&#10;# AC_PASSWORD is the name of the keychain item created with `notarytool store-credentials`.&#10;# Grant keychain access to Xcode if prompted by Xcode.&#10;AC_PASSWORD=&quot;personal&quot;&#10;&#10;# Do all of the work in a subdirectory of /tmp, and use a&#10;# unique ID so that there&apos;s no collision with previous builds.&#10;EXPORT_UUID=`uuidgen`&#10;EXPORT_PATH=&quot;/tmp/$PRODUCT_NAME-$EXPORT_UUID&quot;&#10;APP_NAME=&quot;$PRODUCT_NAME.app&quot;&#10;# Needs to match what create-dmg outputs&#10;CREATE_DMG_PATH=&quot;$EXPORT_PATH/$PRODUCT_NAME $MARKETING_VERSION.dmg&quot;&#10;DMG_PATH=&quot;$EXPORT_PATH/$PRODUCT_NAME-$MARKETING_VERSION.dmg&quot;&#10;&#10;mkdir -p &quot;$EXPORT_PATH&quot;&#10;&#10;# Open the folder that was created&#10;open &quot;$EXPORT_PATH&quot;&#10;&#10;# Xcode doesn&apos;t show run script errors in build log.&#10;exec &gt; &quot;$EXPORT_PATH/Xcode run script.log&quot; 2&gt;&amp;1&#10;&#10;# Use osascript(1) to present notification banners; otherwise&#10;# there&apos;s no progress indication until the script finishes.&#10;/usr/bin/osascript -e &apos;display notification &quot;Exporting application archive&#x2026;&quot; with title &quot;Submitting app for notarization&quot;&apos;&#10;&#10;# Ask xcodebuild(1) to export the app.&#10;/usr/bin/xcodebuild -exportArchive -archivePath &quot;$ARCHIVE_PATH&quot; -exportOptionsPlist &quot;$SRCROOT/ExportOptions.plist&quot; -exportPath &quot;$EXPORT_PATH&quot;&#10;&#10;if [ $? -ne 0 ]; then&#10;  /usr/bin/osascript -e &apos;display notification &quot;Export of application archive failed&quot; with title &quot;Submitting app for notarization&quot;&apos;&#10;  open &quot;$EXPORT_PATH/Xcode run script.log&quot;&#10;  exit 1&#10;fi&#10;&#10;osascript -e &apos;display notification &quot;Creating DMG&quot; with title &quot;Submitting app for notarization&quot;&apos;&#10;&#10;# Ensure correct node version&#10;# Requires fnm to be installed&#10;eval &quot;$(fnm env)&quot;&#10;fnm use v20.9.0&#10;&#10;if [ $? -ne 0 ]; then&#10;  /usr/bin/osascript -e &apos;display notification &quot;Creating DMG failed while ensuring node version with fnm&quot; with title &quot;Submitting app for notarization&quot;&apos;&#10;  open &quot;$EXPORT_PATH/Xcode run script.log&quot;&#10;  exit 1&#10;fi&#10;&#10;# Create DMG using create-dmg (requires python and python-setuptools to be installed!)&#10;# For icons to be set correctly, also required graphicsmagick and imagemagick to be installed&#10;# More info under https://github.com/sindresorhus/create-dmg&#10;(cd $EXPORT_PATH &amp;&amp; npx --yes create-dmg@7.0.0 &quot;$APP_NAME&quot;)&#10;&#10;if [ $? -ne 0 ]; then&#10;  /usr/bin/osascript -e &apos;display notification &quot;Creating DMG failed, retrying once&quot; with title &quot;Submitting app for notarization&quot;&apos;&#10;  (cd $EXPORT_PATH &amp;&amp; npx --yes create-dmg@7.0.0 --overwrite &quot;$APP_NAME&quot;)&#10;&#10;  if [ $? -ne 0 ]; then&#10;    /usr/bin/osascript -e &apos;display notification &quot;Creating DMG failed again, aborting&quot; with title &quot;Submitting app for notarization&quot;&apos;&#10;    open &quot;$EXPORT_PATH/Xcode run script.log&quot;&#10;    exit 1&#10;  fi&#10;fi&#10;&#10;mv &quot;$CREATE_DMG_PATH&quot; &quot;$DMG_PATH&quot;&#10;&#10;osascript -e &apos;display notification &quot;Submitting DMG for notarization&#x2026;&quot; with title &quot;Submitting app for notarization&quot;&apos;&#10;&#10;# Submit the finished deliverables for notarization.&#10;# Wait up to 2 hours for a response.&#10;# Use verbose logging in order to file feedback if an error occurs.&#10;&quot;$DEVELOPER_BIN_DIR/notarytool&quot; submit -p &quot;$AC_PASSWORD&quot; --verbose &quot;$DMG_PATH&quot; --wait --timeout 2h --output-format plist &gt; &quot;$EXPORT_PATH/NotarizationResponse.plist&quot;&#10;&#10;if [ $? -eq 0 ]; then&#10;  message=`/usr/libexec/PlistBuddy -c &quot;Print :message&quot; &quot;$EXPORT_PATH/NotarizationResponse.plist&quot;`&#10;  status=`/usr/libexec/PlistBuddy -c &quot;Print :status&quot; &quot;$EXPORT_PATH/NotarizationResponse.plist&quot;`&#10;else&#10;  /usr/bin/osascript -e &apos;display notification &quot;Failed to submit DMG for notarization&quot; with title &quot;Submitting app for notarization&quot;&apos;&#10;  open &quot;$EXPORT_PATH/Xcode run script.log&quot;&#10;  exit 1&#10;fi&#10;&#10;osascript -e &quot;display notification \&quot;$message: $status\&quot; with title \&quot;Submitting app for notarization\&quot;&quot;&#10;&#10;osascript -e &apos;display notification &quot;Stapling notarization ticket to DMG&quot; with title &quot;Submitting app for notarization&quot;&apos;&#10;&#10;&quot;$DEVELOPER_BIN_DIR/stapler&quot; staple &quot;$DMG_PATH&quot; &#10;&#10;if [ $? -ne 0 ]; then&#10;  /usr/bin/osascript -e &apos;display notification &quot;Failed stapling ticket to DMG&quot; with title &quot;Submitting app for notarization&quot;&apos;&#10;  open &quot;$EXPORT_PATH/Xcode run script.log&quot;&#10;  exit 1&#10;fi&#10;&#10;osascript -e &apos;display notification &quot;Sucessfully stapled DMG with ticket&quot; with title &quot;Submitting app for notarization&quot;&apos;&#10;">
               <EnvironmentBuildable>
                  <BuildableReference
                     BuildableIdentifier = "primary"
                     BlueprintIdentifier = "6CB027212BFF817E00C4C3B1"
                     BuildableName = "PReek.app"
                     BlueprintName = "PReek"
                     ReferencedContainer = "container:PReek.xcodeproj">
                  </BuildableReference>
               </EnvironmentBuildable>
            </ActionContent>
         </ExecutionAction>
      </PostActions>
   </ArchiveAction>
</Scheme>
